{"version":3,"sources":["../scripts/streaming.js"],"names":["getStreamingKey","localStorage","getItem","source","video","document","querySelector","Hls","isSupported","hls","loadSource","attachMedia","on","Events","MANIFEST_PARSED","play","canPlayType","src","addEventListener"],"mappings":"AAAA,IAAMA,eAAe,GAAGC,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAxB;AACA,IAAIC,MAAM,2CAAoCH,eAApC,gBAAV;AAEA,IAAMI,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,kBAAvB,CAAd;;AAEA,IAAIC,GAAG,CAACC,WAAJ,EAAJ,EAAuB;AACnB,MAAIC,GAAG,GAAG,IAAIF,GAAJ,EAAV;AACAE,EAAAA,GAAG,CAACC,UAAJ,CAAeP,MAAf;AACAM,EAAAA,GAAG,CAACE,WAAJ,CAAgBP,KAAhB;AACAK,EAAAA,GAAG,CAACG,EAAJ,CAAOL,GAAG,CAACM,MAAJ,CAAWC,eAAlB,EAAmC,YAAY;AAC3CV,IAAAA,KAAK,CAACW,IAAN;AACH,GAFD;AAGH,CAPD,CAQA;AACA;AACA;AACA;AACA;AAZA,KAaK,IAAIX,KAAK,CAACY,WAAN,CAAkB,+BAAlB,CAAJ,EAAwD;AACzDZ,IAAAA,KAAK,CAACa,GAAN,GAAY,0DAAZ;AACAb,IAAAA,KAAK,CAACc,gBAAN,CAAuB,gBAAvB,EAAyC,YAAY;AACjDd,MAAAA,KAAK,CAACW,IAAN;AACH,KAFD;AAGH,IAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"streaming.3b4eeb1c.js","sourceRoot":"../src/views","sourcesContent":["const getStreamingKey = localStorage.getItem('key');\nlet source = `http://45.63.62.153:3002/live/${getStreamingKey}/index.m3u8`;\n\nconst video = document.querySelector('.video-streaming');\n\nif (Hls.isSupported()) {\n    var hls = new Hls();\n    hls.loadSource(source);\n    hls.attachMedia(video);\n    hls.on(Hls.Events.MANIFEST_PARSED, function () {\n        video.play();\n    });\n}\n// hls.js is not supported on platforms that do not have Media Source Extensions (MSE) enabled.\n// When the browser has built-in HLS support (check using `canPlayType`), we can provide an HLS manifest (i.e. .m3u8 URL) directly to the video element through the `src` property.\n// This is using the built-in support of the plain video element, without using hls.js.\n// Note: it would be more normal to wait on the 'canplay' event below however on Safari (where you are most likely to find built-in HLS support) the video.src URL must be on the user-driven\n// white-list before a 'canplay' event will be emitted; the last video event that can be reliably listened-for when the URL is not on the white-list is 'loadedmetadata'.\nelse if (video.canPlayType('application/vnd.apple.mpegurl')) {\n    video.src = 'https://video-dev.github.io/streams/x36xhzz/x36xhzz.m3u8';\n    video.addEventListener('loadedmetadata', function () {\n        video.play();\n    });\n}\n\n// if (video.src) {\n//     const videoFound = document.querySelector('.video-not-found');\n//     videoFound.setAttribute('style', 'display: none !important');\n//     videoFound.classList.remove('d-flex', 'flex-column');\n// } else {\n//     const videoFound = document.querySelector('.video-not-found');\n//     videoFound.setAttribute('style', 'display: flex');\n//     videoFound.classList.add('d-flex', 'flex-column');\n// }"]}